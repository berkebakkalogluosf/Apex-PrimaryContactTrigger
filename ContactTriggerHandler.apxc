public with sharing class ContactTriggerHandler {
    public static void handleBefore(List<Contact> contacts, Map<Id, Contact> oldContactMap) {
        List<Contact> primaryContacts = new List<Contact>();
        
        for (Contact contact : contacts) {
            if (contact.Is_Primary_Contact__c && contact.AccountId != null) {
                primaryContacts.add(contact);
            }
        }
        
        if (primaryContacts.size() > 1) {
            for (Contact primaryContact : primaryContacts) {
                primaryContact.Is_Primary_Contact__c.addError('You cannot insert more than one primary contact into an account');
            }
        } else if (primaryContacts.size() == 1) {
            Contact primaryContact = primaryContacts[0];
            List<Contact> otherPrimaryContacts = new List<Contact>();
                
            try {
                otherPrimaryContacts = [SELECT Id, Is_Primary_Contact__c 
                                        FROM Contact 
                                        WHERE Id != :primaryContact.Id 
                                        AND AccountId = :primaryContact.AccountId 
                                        AND Is_Primary_Contact__c = true];
            } catch (QueryException e) {
                System.debug(e);
            }
            
            if (otherPrimaryContacts.isEmpty()) {
                AsyncUpdate.setPrimaryPhone(primaryContact.Id, primaryContact.AccountId);
            } else {
                primaryContact.Is_Primary_Contact__c.addError('There already exists a primary contact for this account');
            }
        }
    }
}